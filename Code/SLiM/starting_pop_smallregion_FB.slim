// -----------------------------------------------------------------------------
// Simulation of Cage Experiment (Reuter Lab, 2021) — Part 1
// Region: 3R:18,515,500-18,526,500 (~11 kb)
// Using fixed DGRP2 lines: 14 FB + 14 MB
// Growth from 14->190 over 3 gens, move into cage 1 (9:1 FB:MB ratio)
// Neutral model with uniform recombination and mutation rates
// Author: Baron Koylass | Date: 2025-10-16 | Version 1.02
// Requires: SLiM 5.0
// -----------------------------------------------------------------------------

// ------------------------------ INITIALIZATION -------------------------------
initialize() {

    // Wright–Fisher model, nucleotide-based
    initializeSLiMModelType("WF");
    initializeSLiMOptions(nucleotideBased = T);
    initializeTreeSeq();

    // Set ancestral reference
    initializeAncestralNucleotides(
        "/data/home/bty565/simulations/inputs/fasta/GCA_000001215.4_focal11kb.fa"
    );

    // ----------------- Mutation model -----------------
    // Mutation rate and recombination from literature
    // defineConstant("MU", 5.21e-9);          // Keightley et al. 2014 PLoS Biol - If ever required
    defineConstant("RHO", 1.71642e-8);      // Comeron et al. 2012 PLoS Genet

    initializeMutationTypeNuc("m1", 0.5, "f", 0.0); // neutral
    initializeMutationTypeNuc("m2", 0.5, "f", 0.0); // neutral (placeholder)
    m1.convertToSubstitution = F;
    m2.convertToSubstitution = F;

    // ----------------- Genomic elements -----------------
    // Region layout (positions relative to 3R:18,515,500–18,526,500)
    initializeGenomicElementType("g1", c(m1, m2), c(1.0, 0.0), mmJukesCantor(0.0));
    initializeGenomicElementType("g2", c(m1, m2), c(0.0, 1.0), mmJukesCantor(0.0));
    initializeGenomicElementType("g3", c(m1, m2), c(1.0, 0.0), mmJukesCantor(0.0));

    initializeGenomicElement(g1, 0, 4998);
    initializeGenomicElement(g2, 4999, 5999);
    initializeGenomicElement(g3, 6000, 10999);
    initializeRecombinationRate(RHO);
    // initializeMutationRate(0);
}

// --------------------------- POPULATION SETUP -------------------------------
1 early() {
    // Create subpopulations (empty shells)
    sim.addSubpop("p1", 14);
    sim.addSubpop("p2", 14);

    // Load genotypes from DGRP2 VCFs into each subpop
    p1.haplosomes.readHaplosomesFromVCF(
        "/data/home/bty565/simulations/inputs/vcfs/FB/dgrp2_FB.vcf", m1);
    p2.haplosomes.readHaplosomesFromVCF(
        "/data/home/bty565/simulations/inputs/vcfs/MB/dgrp2_MB.vcf", m1);
    cat("DGRP2 VCFs loaded successfully for p1 and p2.\n");
}

// ----------------------- GROWTH AND CAGE TRANSFER ----------------------------
// Early() block for generation-specific growth and cage formation
4 early() {

        // Grow both lines to 250 individuals each (neutral expansion)
        p1.setSubpopulationSize(250);
        p2.setSubpopulationSize(250);

        // Create p3 with 1 dummy individual (required by SLiM)
        sim.addSubpop("p3", 1);

        // Define cage composition
        defineConstant("CAGE_SIZE", 250);
        defineConstant("PROP_FB", 0.9);
        n1 = asInteger(PROP_FB * CAGE_SIZE);
        n2 = CAGE_SIZE - n1;

        // Sample individuals from p1 and p2
        inds_from_p1 = sample(p1.individuals, n1);
        inds_from_p2 = sample(p2.individuals, n2);

        // Remove the dummy individual
        p3.individuals[0].kill();

        // Add sampled individuals from p1 and p2 to p3
        p3.takeMigrants(c(inds_from_p1, inds_from_p2));

        cat("Formed cage population p3 with ", n1, " FB and ", n2, " MB flies.\n");
    }

// Late() block for generation-specific output
4 late() {

        // Stop migration (set all rates to 0)
        p3.setMigrationRates(c(p1, p2), c(0.0, 0.0));

        // Output a VCF sample of 190 individuals from p3
        outPath = "/data/home/bty565/simulations/outputs/FB/starting_pop_FB.vcf";
        p3.outputVCFSample(250, filePath = outPath);

        cat("Output VCF written to: ", outPath, "\n");

        // End simulation
        sim.simulationFinished();
    }

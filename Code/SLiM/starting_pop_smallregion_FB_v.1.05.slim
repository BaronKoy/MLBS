// -----------------------------------------------------------------------------
// Simulation of Cage Experiment (Reuter Lab, 2021) — Part 1
// Region: 3R:18,515,500-18,526,500 (~11 kb)
// Using fixed DGRP2 lines: 14 FB + 14 MB
// 700 per generation line (50 x each of 14 lines)
// Neutral model with uniform recombination and mutation rates
// Author: Baron Koylass | Date: 2025-10-27 | Version 1.06
// Requires: SLiM 5.0
// -----------------------------------------------------------------------------

// ------------------------------ INITIALIZATION -------------------------------
initialize() {

    // Wright–Fisher model, nucleotide-based
    initializeSLiMModelType("WF");
    initializeSLiMOptions(nucleotideBased = T);
    initializeTreeSeq();

    // Set ancestral reference
    initializeAncestralNucleotides(
        "/data/home/bty565/simulations/inputs/fasta/GCA_000001215.4_focal11kb.fa"
    );

    // ----------------- Mutation model -----------------
    // Mutation rate and recombination from literature
    // defineConstant("MU", 5.21e-9);          // Keightley et al. 2014 PLoS Biol - If ever required
    defineConstant("RHO", 1.71642e-8);      // Comeron et al. 2012 PLoS Genet

    initializeMutationTypeNuc("m1", 0.5, "f", 0.0); // neutral
    initializeMutationTypeNuc("m2", 0.5, "f", 0.0); // neutral (placeholder)
    m1.convertToSubstitution = F;
    m2.convertToSubstitution = F;

    // ----------------- Genomic elements -----------------
    // Region layout (positions relative to 3R:18,515,500–18,526,500)
    initializeGenomicElementType("g1", c(m1, m2), c(1.0, 0.0), mmJukesCantor(0.0));
    initializeGenomicElementType("g2", c(m1, m2), c(0.0, 1.0), mmJukesCantor(0.0));
    initializeGenomicElementType("g3", c(m1, m2), c(1.0, 0.0), mmJukesCantor(0.0));

    initializeGenomicElement(g1, 0, 4998);
    initializeGenomicElement(g2, 4999, 5999);
    initializeGenomicElement(g3, 6000, 10999);
    initializeRecombinationRate(RHO);
    // initializeMutationRate(MU); // If ever required
}

// --------------------------- POPULATION SETUP -------------------------------
1 early() {
    // Create subpopulations and load in genotypes from DGRP2 VCFs
    sim.addSubpop("p1", 700);
    sim.addSubpop("p2", 700);

    // Load genotypes from DGRP2 VCFs into each subpop
    p1.haplosomes.readHaplosomesFromVCF(
        "/data/home/bty565/simulations/inputs/vcfs/FB/dgrp2_FB.vcf", m1);
    p2.haplosomes.readHaplosomesFromVCF(
        "/data/home/bty565/simulations/inputs/vcfs/MB/dgrp2_MB.vcf", m1);
    cat("DGRP2 VCFs loaded successfully for p1 and p2.\n");
}

// Late() block to set up migration into cage population p3 - 9:1 ratio
4 early() {
    defineConstant("CAGE_SIZE", 700);
    defineConstant("PROP_FB", 0.9);
    n1 = asInteger(PROP_FB * CAGE_SIZE); // 630
    n2 = CAGE_SIZE - n1;                 // 70

    // Step 1: create a temporary subpopulation with one dummy individual
    sim.addSubpop("p3", 1);

    // Step 2: sample from p1 and p2
    inds1 = p1.sampleIndividuals(n1);
    inds2 = p2.sampleIndividuals(n2);

    // Step 3: move them into p3
    p3.takeMigrants(c(inds1, inds2));

    // Step 4: remove the placeholder individual
    p3.individuals[0].setValue("kill", 1);  // mark for removal
    p3.removeIndividuals(p3.individuals[p3.individuals.tagValue("kill") == 1]);

    cat("p3 formed with ", p3.individualCount, " individuals (",
        n1, " from p1, ", n2, " from p2).\n");
}

4 late() {
        // Output a VCF sample of 700 individuals from p3
        outPath = "/data/home/bty565/simulations/outputs/FB/starting_pop_FB.vcf";
        sim.outputFull();
        ind = p3.sampleIndividuals(700);
        ind.outputIndividualsToVCF(filePath = outPath, simplifyNucleotides=T);

        // End simulation
        sim.simulationFinished();
    }

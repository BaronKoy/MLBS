// -----------------------------------------------------------------------------
// Cage experiment â€” WF, 9:1 founding, 3 generations, output all loci from input
// SLiM v5.0
// Version: 1.12
// -----------------------------------------------------------------------------

initialize() {
    // ---------- Command-line seed override ----------
    // You can run: slim -d SEED=20251029 this_script.slim
    if (!exists("SEED")) {
        SEED = 20251028;
    }
    setSeed(SEED);

    // ---------- WF & nucleotide options ----------
    initializeSLiMModelType("WF");
    initializeSLiMOptions(nucleotideBased = T);
    initializeTreeSeq();

    // ---------- Ancestral reference ----------
    initializeAncestralNucleotides(
        "/data/home/bty565/simulations/inputs/fasta/GCA_000001215.4_focal11kb.fa"
    );

    // ---------- Mutation & recombination ----------
    defineConstant("RR", 1.71642e-8);

    initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
    initializeMutationTypeNuc("m2", 0.5, "f", 0.0);
    m1.convertToSubstitution = F;
    m2.convertToSubstitution = F;

    initializeGenomicElementType("g1", c(m1, m2), c(1.0, 0.0), mmJukesCantor(0.0));
    initializeGenomicElementType("g2", c(m1, m2), c(0.0, 1.0), mmJukesCantor(0.0));
    initializeGenomicElementType("g3", c(m1, m2), c(1.0, 0.0), mmJukesCantor(0.0));

    initializeGenomicElement(g1, 0, 4998);
    initializeGenomicElement(g2, 4999, 5999);
    initializeGenomicElement(g3, 6000, 10999);

    initializeRecombinationRate(RR);
}

// --------------------------- POPULATION SETUP -------------------------------
1 early() {
    sim.addSubpop("p1", 700);  // FB
    sim.addSubpop("p2", 700);  // MB
    sim.addSubpop("p3", 700);  // Cage population

    // Load founder genotypes from VCFs
    p1.haplosomes.readHaplosomesFromVCF(
        "/data/home/bty565/simulations/inputs/vcfs/FB/dgrp2_FB.vcf", m1);
    p2.haplosomes.readHaplosomesFromVCF(
        "/data/home/bty565/simulations/inputs/vcfs/MB/dgrp2_MB.vcf", m1);

    catn("Generation 1: DGRP2 VCFs loaded into p1 and p2.");
}

// --------------------------- 9:1 MIXING -------------------------------------
4 early() {
    // p3 receives 90% gametes from p1, 10% from p2 (non-self-referential)
    p3.setMigrationRates(c(p1, p2), c(0.9, 0.1));

    catn("Generation 4: p1 & p2 mix in their isolated populations for 3 generations p3 receives 90% gametes from p1, 10% from p2.");
}

// --------------------------- STOP MIGRATION ---------------------------------
5 early() {
    // Stop migration to p3 so it reproduces independently for generation 5
    p3.setMigrationRates(c(p1, p2), c(0.0, 0.0));
    catn("Generation 5: Migration stopped. p3 reproduces independently. Prepare for output.");
}

// -------------------------- OUTPUT: all mutations & full output ----------------------------
5 late() {
    defineConstant("OUT_MUTS", "/data/home/bty565/simulations/outputs/FB/starting_pop_FB_mutations.txt");
    defineConstant("OUT_FULL", "/data/home/bty565/simulations/outputs/FB/starting_pop_FB_genotypes.txt");

    // Write all mutations (including fixed/lost)
    sim.outputMutations(sim.mutations, OUT_MUTS, F);

    // Write a complete snapshot of the entire simulation state
    sim.outputFull(OUT_FULL);

    catn("--------------------------------------------------");
    catn("Simulation complete.");
    catn("All mutations (including fixed/lost) exported to: " + OUT_MUTS);
    catn("Full population state written to: " + OUT_FULL);
    catn("Random seed used: " + asString(getSeed()));
    catn("--------------------------------------------------");
    // Finish simulation
    sim.simulationFinished();
}
